#!/usr/bin/php
<?php
  /**
   *
   * Should be called from t3tool
   * path should be TYPO3 root dir (PATH_site)
   *
   *
   */

  # init
  error_reporting(E_ALL ^ E_NOTICE ^ E_DEPRECATED);
//  error_reporting(E_ALL);

  global $TYPO3_CONF_VARS;
  define('PATH_site', getcwd() . '/');
  define('PATH_typo3conf', getcwd() . '/typo3conf/');
  readData();
  if (is_file(PATH_typo3conf . 'localconf.php')) {
    require('typo3conf/localconf.php');
    $GLOBALS['version_4'] = TRUE;
  }
  if (is_file(PATH_typo3conf . 'LocalConfiguration.php')) {
    $TYPO3_CONF_VARS = include(PATH_typo3conf . 'LocalConfiguration.php');
    if (is_file(PATH_typo3conf . 'AdditionalConfiguration.php')) {
      include(PATH_typo3conf . 'AdditionalConfiguration.php');
    }
    $db = $TYPO3_CONF_VARS['DB'];
    $typo_db_host = $db['host'];
    $typo_db_username = $db['username'];
    $typo_db_password = $db['password'];
    $typo_db = $db['database'];
    $GLOBALS['version_6'] = TRUE;
  }

  // realurl ?
  if (is_file(PATH_typo3conf . 'realurl_conf.php')) {
  require_once(PATH_typo3conf . 'realurl_conf.php');
  }

  if (!$typo_db) {
    die("Error: t3tool requires a functional TYPO3 installation. Apparently you have no DB credentials. Are you in PATH_site ?\n\n");
  }

  # connect to db
  $mysqli = mysqli_connect($typo_db_host, $typo_db_username, $typo_db_password);
  mysqli_select_db($mysqli, $typo_db);

  // part of TCA
  $label = array(
    'pages' => 'title',
    'sys_domain' => 'domainName',
    'sys_template' => 'title',
    'tt_content' => 'header',
    'tt_news' => 'title',
  );

  // split arguments and flag
  foreach ($argv as $i=>$arg) {
    if ($arg{0} == '-')  {
      $flags[substr($arg, 1)] = TRUE;
    } else {
      $args[] = $arg;
    }
  }

  array_shift($args);
  $module = array_shift($args);

  $modules = array('alldomains', 'allusers', 'cc', 'data', 'deprecation', 'domain', 'ext', 'feuser', 'log', 'page', 'plugin', 'search', 'show', 'sqlq', 'user', 'task', 'template');
  $aliases = array();
  foreach ($modules as $m) {
    require_once("t3tool-$m.phpsh");
    $function = 't3tool_' . $m . '_cmdaliases';
    if (function_exists($function)) {
      $aliases = array_merge($aliases, $function());
    }
  }
  if (isset($aliases[$module])) {
    $args = explode(' ', str_replace($module, $aliases[$module], implode(' ', $argv)));
    array_shift($args);
    $module = array_shift($args);
  }

  if (in_array($module, $modules)) {
    $function = 't3tool_' . $module . '_handlecmd';
    if (function_exists($function)) {
      $function($args);
    }
    die(); // this is temporary
  }

  switch ($module) {

    #
    case 'rootline' :
      $a = array();
      if (!$argv[2]) {
        die("Usage : t3tool rootline <uid or page-title>\n  Show the rootline of page\n");
      }
      $res = sql_query('select title, uid, pid, deleted, hidden from pages where uid=' . intval($args[0]) . ' or title like "' . $args[0] . '"');
      while ($row = sql_fetch_array($res)) {
        $a = getRootline($row['uid']);
        sendAsFlatTable($a, TRUE);
      }
      break;

    #
    # t3tool find <table>
    # t3tool find <table:uid>
    #
    case 'find' :
      $parts = explode(':', $argv[2]);

      $table = 'pages';
      $field = 'uid';
      $uid = $parts[0];

      if (sizeof($parts) > 1) {
        list($table, $uid) = $parts;
      }
      if (sizeof($parts) > 2) {
        list($table, $field, $uid) = $parts;
      }

      if (!$uid) {
        die("Usage:\n  t3tool find <table:uid>\n  t3tool find <table:field:string>\nWill tell you where element is\n");
      }

      $lab = $label[$table];

      $res = sql_query("select t.$lab as title, t.uid, t.pid, t.deleted, t.hidden from $table as t left join pages as p on (p.uid=t.pid) where t.$field='$uid'");
      while ($row = mysql_fetch_array($res)) {
        $row['title'] = $table . ':' . $row['uid'];
        $a = getRootline($row['pid']);
        array_push($a, $row);
        sendAsTable($a, TRUE);
      }
      break;

    case 'template' :
    case 'tpl' :
      require_once('t3tool-template.phpsh');
      break;

    case 'config' :
    case 'tca' :
    case 'ts' :
      break;

    default :
      echo 'Usage :
  t3tool user
    Handle a single BE user.
  t3tool allusers
    Handle all BE users.
  t3tool search
    Do a search in database.
  t3tool show
    Select a single record from database.
  t3tool domain
    Handle a single domain record.
  t3tool alldomains
    Handle all domain records.
  t3tool template
    Handle a single template record.
  t3tool rootline <pid>
    Show rootline of page.
  t3tool search <table> <string>
    Search table for string.
  t3tool sqlq <query>
    Execute DB query.
  t3tool page
    Handle a single page.
  t3tool sql
    Do other sql stuff.

';


  }

  /**
   * @param string $prompt
   *
   * @return string
   */
  if (!function_exists('readline')) {
    function readline($prompt = '') {
      echo $prompt;

      return rtrim(fgets(STDIN), "\n");
    }
  }

  /**
   * @param $sql
   *
   * @return bool|mysqli_result
   *
   */
  function sql_query($sql) {
    global $mysqli;
    $res = mysqli_query($mysqli, $sql);
    //   print "$sql\n\n";
    if ($res === FALSE) {
      $error = mysqli_error($mysqli);
      if ($error) {
        print "$error\n$sql\n";
      }
      foreach (debug_backtrace() as $bt) {
        print $bt['function'] . ', ' . $bt['file'] . ', line ' . $bt['line'] . "\n";
      }

      return FALSE;

    }

    return $res;
  }

  /**
   * @param $res
   *
   * @return array|null
   */
  function sql_fetch_assoc($res) {
    return mysqli_fetch_assoc($res);
  }

  /**
   * @param $res
   *
   * @return array|null
   */
  function sql_fetch_array($res) {
    return sql_fetch_assoc($res);
  }

  /**
   * Converts a SQL statement to an array containing the first row of the returned result.
   *
   * @param $sql
   *
   * @return array|null
   */
  function sql_get_row($sql) {
    $res = sql_query($sql);
    $row = sql_fetch_assoc($res);

    return $row;
  }

  /**
   * Converts a SQL statement to an array of all returned results.
   *
   * @param $sql
   *
   * @return array|bool
   */
  function sql_get_rows($sql) {
    $res = sql_query($sql);
    if ($res == FALSE) {
      return FALSE;
    }
    $rows = array();
    while ($row = sql_fetch_assoc($res)) {
      $rows[] = $row;
    }

    return $rows;
  }

  /**
   * Returns number of rows from last SELECT statement.
   *
   * @return int
   */
  function sql_num_rows() {
    global $mysqli;

    return mysqli_num_rows($mysqli);
  }

  /**
   * Returns number of affected rows by last SQL statement.
   *
   * @return int
   */
  function sql_affected_rows() {
    global $mysqli;

    return mysqli_affected_rows($mysqli);
  }

  /**
   * Puts all rows in the correct place in the page tree and output the result.
   *
   * @param array $rows
   */
  function showRecordsInPageTree(array $rows, $table = '') {
    global $label;

    if (!is_array($rows)) {
      return;
    }

    $result = array();
    foreach ($rows as $row) {
      if (!isset($row['deleted'])) {
        $row['deleted'] = '0';
      }
      if (!isset($row['_table'])) {
        $row['_table'] = $table;
      }
      if (!isset($row['title']) && isset($label[$row['_table']])) {
        $row['title'] = $row[$label[$row['_table']]];
      }
      $result[$row['pid']]['_'][$row['_table']][$row['uid']] = $row;
    }
    pt($result);
    pt($result);
    pt($result);
    $b = array();
    //flattenArray($result, $b);
    sendAsTable($result);
  }

  /**
   * Determine the rootline of the pid and output the result.
   *
   * @param $pid
   *
   * @return array
   */
  function getRootline($pid) {
    pa($pid, $a);
    if (!sizeof($a)) {
      die("Page not found\n");
    }
    echo "Rootline for page :\n";
    $a = array_reverse($a);

    return $a;
  }

  /**
   * Converts an array of records to a tree structure array of records.
   *
   * @param $a
   */
  function pt(&$a) {
    foreach ($a as $pid => $b) {
      $res = sql_query('select title, uid, pid, deleted, hidden from pages where uid=' . intval($pid));
      if ($page = sql_fetch_array($res)) {
        foreach ($page as $k => $v) {
          $a[$page['pid']]['_']['pages'][$pid][$k] = $v;
        }
        $a[$page['pid']]['_']['pages'][$pid]['_table'] = 'pages';

        if ($page['uid']) {
          $a[$page['pid']]['_']['pages'][$pid] = array_replace_recursive($a[$page['pid']]['_']['pages'][$pid], $b);
          unset($a[$pid]);
        }
      }
    }
  }

  /**
   * Crops the string around the search query and hilite the query within the string.
   *
   * @param $s
   * @param $q
   *
   * @return string
   */
  function cropAndHilite($s, $q) {
    $a = strpos($s, $q);
    if ($a === FALSE) {
      return '';
    }
    $a = max(0, $a - 10);
    $l = min($a + strlen($q) + 20, strlen($s));

    return substr($s, $a, $l - $a);
  }


  /**
   * Converts .... something ....
   *
   * @param $uid
   * @param $a
   *
   * @return bool
   */
  function pa($uid, &$a) {
    $res = sql_query('select title, uid, pid, deleted, hidden from pages where pid>0 and uid=' . intval($uid));
    $page = sql_fetch_array($res);
    if (!$page) {
      return FALSE;
    }
    $a[] = $page;
    if ($page['pid']) {
      pa($page['pid'], $a);
    }
  }

  /**
   * @param $sql
   */
  function format_ressource_function_is_deprecated($sql) {
    $res = sql_query($sql);
    while ($r = mysql_fetch_array($res)) {
      $s[] = $r;
      foreach ($r as $k => $v) {
        if (!is_int($k)) {
          $h[] = $k;
        }
      }
    }
    echo implode(', ', $h);
  }

  /**
   *
   */
  function flattenArray_function_deprecated($a, &$b, $depth = 0, $table = '') {
    foreach ($a as $pid => $page) {

      $page['depth'] = $depth;
      $page['table'] = $table;
      $b[$pid] = $page;

      if (isset($page['_'])) {
        foreach ($page['_'] as $table => $records) {
          flattenArray($records, $b, $depth + 1, $table);
        }
      }
      unset($b[$pid]['_']);
    }

    return $b;
  }

  /**
   * Returns a delete clause for the table. Very similar to t3lib_befunc::enableFields().
   *
   * @param $table
   * @param $alias
   */
  function getDeleteClause($table, $alias = '') {
    if ($alias !== '') {
      $table = $alias;
    }

    // these tables have field deleted
    if (in_array($table, array('pages', 'tt_content'))) {
      // all others have
      return " and not $table.deleted";
    }


    return '';
  }

  /**
   * Returns a OR-style where query. Used to search in multiple fields in table.
   *
   * @param $table
   * @param $fields
   * @param $q
   */
  function getWhereByString($table, $q='', $fields = array()) {
    if (!is_array($fields)) {
      $fields = explode(',', $fields);
    }

    $where = '';

    if (intval($q)) {
      $where .= " and uid=" . $q . getDeleteClause($table);

        $matches = sql_get_rows("select * from $table where 1 " . $where);
 if (sizeof($matches) == 1) {
        return $where;
 }
    }

    if ($q) {
      // match exact
      $or = " $table.uid='$q'";
      foreach ($fields as $field) {
        $or .= " or $table.$field like '$q'";
      }

      $where = "and ($or)" . getDeleteClause($table);
    }

    $matches = sql_get_rows("select * from $table where 1 " . $where);
    $matchcount = sizeof($matches);
    if (!$matchcount) {
      // match containing
      $or = '0 ';
      foreach ($fields as $field) {
        $or .= " or $field like '%$q%'";
      }

      $where = "and (0 or $or)" . getDeleteClause($table);
    }

    return $where;
  }

  /**
   * Returns records from table that match q in one of the fields.
   *
   * @param       $table
   * @param       $q
   * @param array $fields
   *
   * @return array|bool
   */
  function getRecordsByString($table, $q='', $fields = array(), $selectFields = '*') {
   if ($table == 'pages') {
     // handle special "magic" shorthands
        switch ($q) {
          case 'FIRSTROOT' :
            if ($page = getFirstRootpage()) {
                $q = $page['uid'];
            }
            break;
            default :
        }

      }

   $matches = sql_get_rows("select $selectFields from $table where 1 " . getWhereByString($table, $q, $fields));

    return $matches;
  }

  /**
   * Returns an array containing one single record from table matching q in one of the fields.
   * If the number of records matched is not exactly one, the script dies with a message.
   *
   * @param $table
   * @param $fields
   * @param $q
   */
  function getSingleRecordByString($table, $q, $fields = array()) {
    $matches = getRecordsByString($table, $q, $fields);
    $matchcount = sizeof($matches);

    if ($matchcount == 1) {
      return $matches[0];
    }
    if ($matchcount > 1) {
      die("There are $matchcount records matching $q - skipping.\n");
    }

    die("There are no records matching $q - skipping.\n");
  }


  function getFirstRootpage ($pid=0) {
    $pages = sql_get_rows("
        select pages.uid, pages.pid, is_siteroot, title, domainName
        from pages left join sys_domain on sys_domain.pid=pages.uid
        where pages.pid=$pid and not pages.deleted and not pages.hidden
        order by pages.sorting
        ");

    foreach ($pages as $page) {
        if ($page['is_siteroot'] && $page['domainName'])
            return $page;

        $temp = getFirstRootPage($page['uid']);
        if (is_array($temp))
            return $temp;
    }

    return FALSE;

  }


  /**
   * Formats and outputs a record as a table with headers on left.
   *
   * @param array $a
   */
  function sendRecordAsTable(array $a) {
    $l = array();
    $keys = array_keys($a);
    $values = array_values($a);

    foreach ($keys as $k => $v) {
      $l[0] = max($l[0], strlen($keys[$k]));
      $b[0] = str_pad('', $l[0], '-');
    }
    foreach ($values as $k => $v) {
      if (is_object($v)) {
        $values[$k] = print_r($values[$k], 1);
      } else {
        $values[$k] = preg_replace(";\n|\r\t;", ' ', $values[$k]);
        $values[$k] = crop($values[$k]);
      }
      $l[1] = max($l[1], strlen($values[$k]));
      $b[1] = str_pad('', $l[1], '-');
    }

    foreach ($keys as $k => $v) {
      $keys[$k] = str_pad($keys[$k], $l[0]);
    }
    foreach ($values as $k => $v) {
      $values[$k] = str_pad($values[$k], $l[1]);
    }

    echo "+-" . implode('-+-', $b) . "-+\n";
    foreach ($keys as $k => $v) {
      echo '| ';
      echo $keys[$k] . " | ";
      echo $values[$k] . " |\n";
    }
    echo "+-" . implode('-+-', $b) . "-+\n";

  }

  /**
   * Crop s to length l with ellipsis.
   *
   * @param     $s
   * @param int $l
   *
   * @return string
   */
  function crop($s, $l = 50) {
    return substr($s, 0, $l) . (strlen($s) > $l ? ' ...' : '');
  }

  /**
   * Formats and outputs an array of records as a table with headers on top.
   *
   * @param array $a
   */
  function sendAsFlatTable(array $a) {
    $l = array();
    if (!sizeof($a)) {
      echo "No records\n";

      return;
    }
    $cols = array_keys($a[0]);
    $footer[$cols[0]] = count($a);
    foreach ($a as $y => $row) {
      foreach ($row as $x => $d) {
        $h[$x] = $x;
        $l[$x] = max($l[$x], strlen($d));
        $l[$x] = max($l[$x], strlen($x));
      }
    }

    foreach ($a as $y => $row) {
      foreach ($row as $x => $d) {
        $a[$y][$x] = str_pad($d, $l[$x]);
        $h[$x] = str_pad($h[$x], $l[$x]);
        $footer[$x] = str_pad($footer[$x], $l[$x]);
        $b[$x] = str_pad('', $l[$x], '-');
      }
    }
    echo "+-" . implode('-+-', $b) . "-+\n";
    echo "| " . implode(' | ', $h) . " |\n";
    echo "+-" . implode('-+-', $b) . "-+\n";
    foreach ($a as $y => $row) {
      echo '| ';
      echo implode(' | ', $row) . " |\n";
    }
    echo "+-" . implode('-+-', $b) . "-+\n";
    echo "| " . implode(' | ', $footer) . " |\n";
    echo "+-" . implode('-+-', $b) . "-+\n";
  }

  /**
   * Formats an array as a table, indenting the title by depth, and outputs the result.
   *
   * @param array $a
   * @param int   $depth
   */
  function sendAsTable(array $a, $depth = 0) {
    if (!is_array($a)) {
      return;
    }
    if (!sizeof($a)) {
      return;
    }

    $l = array(
      '_table' => 20,
      'title' => 80,
      'uid' => 5,
      'pid' => 5,
    );
    $t = each($a);
    foreach ($t['value'] as $k => $v) {
      $h[$k] = $k;
    }
    //array_unshift($a, $h);

    foreach ($a as $y => $row) {
      if (isset($row['deleted']) && $row['deleted']) {
        unset($a[$y]);
        continue;
      }

      if ($depth > 1) {
        $a[$y]['title'] = str_repeat('   ', $depth - 1) . '+- ' . $a[$y]['title'];
      }
      foreach ($a[$y] as $x => $f) {
        if ($x == '_') {
          continue;
        }
        $a[$y][$x] = substr($f, 0, 80) . (strlen($f) > 80 ? ' ...' : '');
        if (is_int($x)) {
          unset($a[$y][$x]);
        }
        $l[$x] = isset($l[$x]) ? max($l[$x], strlen($a[$y][$x])) : strlen($a[$y][$x]);
      }
    }
    foreach ($a as $y => $row) {

      foreach ($row as $x => $f) {
        if ($x == '_') {
          continue;
        }
        $a[$y][$x] = str_pad($a[$y][$x], $l[$x]);
      }
    }

    foreach ($a as $y => $row) {

      echo '| ';

      echo implode(' | ', array(
          $row['_table'],
          $row['uid'],
          $row['pid'],
          $row['deleted'],
          $row['title'],
        )) . "\n";

      if (isset($row['_match'])) {
        echo $row['_match'] . "\n";
      }


      if (isset($row['_'])) {
        foreach ($row['_'] as $table => $records) {
          sendAsTable($records, $depth + 1);
        }
      }
    }

  }

  /**
   * Append a line to local
   *
   */
  function writeToLocalConf($s) {
    if (file_exists(PATH_typo3conf . 'localconf.php')) {
      $lc = fopen(PATH_typo3conf . 'localconf.php', 'a');
      fwrite($lc, $s . "\n");
      fclose($lc);
    }
    if (file_exists(PATH_typo3conf . 'LocalConfiguration.php')) {
        $lc = fopen(PATH_typo3conf . 'LocalConfiguration.php', 'a');
        fwrite($lc, $s . "\n");
        fclose($lc);
      }
    }

  /**
   * Append a line to local-local
   *
   */
  function writeToLocalConfLocal($s) {
  error_reporting(E_ALL);
    if ($GLOBALS['version_4']) {
    $filename = PATH_typo3conf . 'localconf_local.php';
    } else {
        $filename = PATH_typo3conf . 'AdditionalConfiguration.php';

    }
appendToPHPFile ($filename, $s);
}

function appendToPHPFile ($filename, $s) {
    $data = "";
    if (file_exists($filename)) {
        $data = file_get_contents($filename);
$data = str_replace('?>', '', $data);
    }
    if (!preg_match(';<\?php;', $data)) {
        $data = "<?php\n" . $data;

    }

    $data = $data . "\n" . $s;
  file_put_contents ($filename, $data);

     }

  /**
   * @param $data
   */
  function writeData() {
    file_put_contents(PATH_site . '.t3tool_data.php', '<?php $GLOBALS["t3tool_data"] = ' . var_export($GLOBALS['t3tool_data'], 1). ';');
  }

  /**
   * @param $data
   */
  function readData() {
    $GLOBALS["t3tool_data"] = array();

    if (is_file(PATH_site . '.t3tool_data.php')) {
      include(PATH_site . '.t3tool_data.php');
    }
  }
