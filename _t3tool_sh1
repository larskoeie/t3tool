#!/bin/sh

#
# Shell script for TYPO3, heavily inspired by Drush
#

# The usage, shown if no command is invoked.
USAGE="Usage: $0 <command> [path]
  Commands :
  
    Domains :
      domains
        List all domains on system.
      domain-add <domainName> <pid>
        Add new domain to system.
      domain-delete
        Delete domain.
      domain-hide
        Hide (disable) domain.
      domain-unhide :
        Unhide (enable) domain.

    Single user :
      user-delete
        Delete user
      user-enable (uublk)
        Enable user to login.
      user-disable (ublk)
        Disable user from logging in (block user).
      user-password (upwd)
        Change user's password.

    All users :
      allusers-delete
        Irreversible !
      allusers-disable
      allusers-enable
      allusers-email-disable
        Irreversible !
";

#
# Require that the current directory is http/
#
t3tool_require_root () {
  dirname=`pwd`
  dirname=`basename $dirname` 
  if [ "$dirname" != "http" ]; then echo "Not site root."; exit 1;
  fi
}

#
# Require that the current directory is http/ and has an existing TYPO3 site.
#
t3tool_require_t3 () {
  t3tool_require_root

  if [ ! -d "typo3" ]; then echo "Not a TYPO3 site."; exit 1;
  fi
}


# Show confirm prompt, wait for Y or N and exit entire script if not Y.
t3tool_confirm () {
  if [ $NOCONFIRM ]; then return;
  fi
  echo -n "$1 - continue ? (y/n)"
  read -r char
  if [ "$char" != "y" ]
  then
    echo "Halted";
    exit;
  fi
}


#
# read TYPO3s DB configuration
#
if [ -d "typo3conf" ]; then 
  existingtypo3=1;

	php_code=$(cat <<-'EOF' 
		error_reporting(E_ERROR | E_PARSE);
		define('PATH_typo3conf', getcwd() . '/typo3conf/');

		# pre-6.0
		$conffile = PATH_typo3conf . 'localconf.php';
print $conffile;
		if (is_file($conffile)) {
			include($conffile); 
			$db_host = $typo_db_host;
			$db_username = $typo_db_username;
			$db_password = $typo_db_password;
			$db_db = $typo_db;
		} else {
			# 6.0 and later
			$conffile = getcwd() . '/typo3conf/LocalConfiguration.php';
			if (is_file($conffile)) {
				$c= (include($conffile)); 
				$db_host = $c['DB']['host'];
				$db_username = $c['DB']['username'];
				$db_password = $c['DB']['password'];
				$db_db = $c['DB']['database'];	
			}
		
		}	
		echo implode(";", array(
			$TYPO3_VERSION,
			$db_host,
			$db_username,
			$db_password,
			$db_db,
		));
EOF
)
	php_cwd=`php -r "$php_code"`
	
	CONFIG=$php_cwd
	LOCALVERSION=`echo $CONFIG | awk '{split($0,a,";"); print a[1]}'`
	LOCALDBHOST=`echo $CONFIG | awk '{split($0,a,";"); print a[2]}'`
	LOCALDBUSER=`echo $CONFIG | awk '{split($0,a,";"); print a[3]}'`
	LOCALDBPASSWORD=`echo $CONFIG | awk '{split($0,a,";"); print a[4]}'`
	LOCALDB=`echo $CONFIG | awk '{split($0,a,";"); print a[5]}'`

	echo "Existing TYPO3 version : $LOCALVERSION"
fi

#
# Execute SQL on TYPO3 database
#
t3tool_sqlq () {	
  if [ -z $LOCALDBPASSWORD ]; then
    mysql -h $LOCALDBHOST -u$LOCALDBUSER $LOCALDB -e "$1"
  else
    mysql -h $LOCALDBHOST -u$LOCALDBUSER -p$LOCALDBPASSWORD $LOCALDB -e "$1"
  fi
}

#
# Fetch a TYPO3 source and untar it. Nothing else.
# First argument is version. Can be :
# - blank : fetch latest
# - 4.6 : fetch latest 4.6
# - x.y.z : fetch exact
#
t3tool_fetch_source () {
	echo "Fetching TYPO3 source ..."

  mkdir -p .t3tool
  cd .t3tool
  wget http://get.typo3.org/$1 -O typo3_src.tar.gz
  cd ..
  tar -zxvf .t3tool/typo3_src.tar.gz
  
  # clean up
#  rm -rf .t3tool
}

#
# Fetch a TYPO3 dummy site.
# $1 - version like "6.1.1"
#
t3tool_fetch_dummy () {
	echo "Fetching dummy package ..."
  mkdir -p .t3tool
  cd .t3tool
  wget "http://get.typo3.org/dummy-$1 -O dummy.tar.gz"
  cd ..
  tar -zxvf .t3tool/dummy.tar.gz
  
  # move content out a level
  mv dummy-$1/* .

  # clean up
  rm -rf .t3tool
  rm -rf dummy-$1
}
		
		
#
# Clear configuration cache
#
t3tool_cc_config () {
	# version 4
  rm -f typo3conf/temp_CACHED*

  # version 6	
#  rm -rf http/typo3temp/Cache
  
  echo "Cleared configuration cache."
}

#
# Clear content cache for all pages
#
t3tool_cc_content () {
	t3tool_sqlq "
	truncate cache_pages;
	truncate cache_
	"
}


#
# 1 if first argument (the unknown version) is at least the second argument
# 0 if it is less than 
#
version_gte () {
  if [ -z $1 ]; then return 0;
  fi
  if [ -z $2 ]; then return 1;
  fi
  
	v11=`echo $1 | cut -d "." -f 1`
	v12=`echo $1 | cut -d "." -f 2`
	v13=`echo $1 | cut -d "." -f 3`
	v21=`echo $2 | cut -d "." -f 1`
	v22=`echo $2 | cut -d "." -f 2`
	v23=`echo $2 | cut -d "." -f 3`

  if [ $v11 -gt $v21 ]; then return "1"; fi
  if [ $v11 -lt $v21 ]; then return "0"; fi
  if [ $v12 -gt $v22 ]; then return "1"; fi
  if [ $v12 -lt $v22 ]; then return "0"; fi
  if [ $v13 -gt $v23 ]; then return "1"; fi
  if [ $v13 -lt $v23 ]; then return "0"; fi

	return "1";  
}

t3tool_enable_install_tool () {
	touch typo3conf/ENABLE_INSTALL_TOOL
}

# If no command, show usage
if [ -z "$1" ]; then echo "$USAGE"; exit 1;
fi

case "$1" in 
	"cc" )
		if [ -z "$1" ]; then echo "Usage : $0 $1 <all|config>"; exit 1;
		fi
	
		case "$2" in
		  "all" )
		    t3tool_cc_config
		  ;;
		  
		  "config" )
		    t3tool_cc_config
		  ;;
		  
		  "content" )
		    t3tool_cc_content
		  ;;
		esac		
  ;;
	
	# database credentials
  "dbc" )
  	echo "mysql -h$LOCALDBHOST -u$LOCALDBUSER -p$LOCALDBPASSWORD $LOCALDB"
  ;;
  
  #
  # Add a domain record to system.
  #
  "domain-add" )
    if [ -z $3 ]; then echo "Usage : $0 $1 <domainName> <pid>"; exit; 		  
	  fi
    t3tool_sqlq "insert into sys_domain (hidden, domainName, pid) values (0, '$2', '$3');"    
  ;;	
  
  #
  # Delete a single domain name from sys_domain that matches $2 exactly, but case-insensitively.
  # Makes domain list afterwards.
  #
	"domain-delete" )
    if [ -z $2 ]; then echo "Missing domainName or UID"; exit; 		  
	  fi
	  t3tool_confirm "This will delete domain from system"
    t3tool_sqlq "delete from sys_domain where uid='$2' or domainName like '$2' limit 1";
  ;;	
  
  #
  # Hide (disable) a domain name from sys_domain that matches $2 exactly, but case-insensitively.
  #
  "domain-hide" )
    if [ -z $2 ]; then echo "Missing domainName or UID"; exit; 		  
	  fi
    t3tool_sqlq "update sys_domain set hidden=1 where uid='$2' or domainName like '$2' limit 1";
  ;;	

  #
  # Unhide (enable) domain name from sys_domain that matches $2 exactly, but case-insensitively.
  #
  "domain-unhide" )
    if [ -z $2 ]; then echo "Missing domainName or UID"; exit; 		  
	  fi
    t3tool_sqlq "update sys_domain set hidden=0 where uid='$2' or domainName like '$2' limit 1";
  ;;	

	"eit" | "install" )
	  t3tool_enable_install_tool
	;;
		
	"install-tool-password" | "itp" )
	  if [ -z "$2" ]; then echo "Usage : $0 $1 <md5>"; exit 1;
		fi
		
		sed -i.bak "s/\?>//g" typo3conf/localconf.php
    
		echo "\$TYPO3_CONF_VARS['BE']['installToolPassword'] = '$2';" >> typo3conf/localconf.php 
		 
	;;
	
	#
	# Fetches a dummy site (no source).
	#
	"fetch-dummy" )
		VERSION=$2
		if [ -z "$VERSION" ]; then echo "Usage : $0 $1 <version>"; exit 1;
		fi
		# before version 6.2, TYPO3 used a "dummy" package
	  version_gte $VERSION 6.2.0
	  if [ $? ]; then
	    echo "gte 6.2"
	  else
	    echo "lt 6.2"
	  fi 
		t3tool_fetch_dummy $VERSION
	;;
	
		
	#
  # Execute arbitrary SQL query on DB.
  #
  "sqlq" )
		if [ -z "$2" ]; then echo "Usage : t3tool $1 <sql>"; exit 1;
		fi
    t3tool_sqlq "$2"
  ;;  		
    
  "users" | "allusers" )
    Q=$2
    if [ -n $Q ]; then
    	t3tool_sqlq "
    	select uid, username, email, disable from be_users 
    	where not deleted 
    	and (
    	  uid = '$Q'
    	  or username like '%$Q%'
    	  or email like '%$Q%'
    	)"	
    else
    	t3tool_sqlq "select uid, username, email, disable from be_users where not deleted;"	
    fi
       
  ;;

	#
  # Disable all users except one.
  #
  "allusers-disable" )
		if [ -z "$2" ]; then echo "Usage : t3tool $1 <except-username>"; exit 1;
		fi			
		t3tool_sqlq "update be_users set disable=1 where username != '$username';"
		handled=1;
	;;

	#
  # Disable all users except one.
  #
  "allusers-delete" )
    username=$2    
		if [ -z "$username" ]; then echo "Usage : t3tool $1 <except-username>"; exit 1;
		fi			
		t3tool_sqlq "delete from be_users where username != '$username';"
		handled=1;
	;;
	
	#
  # Destroy email adresses for all BE users except one. This will effectively disable sending of emails.
  #
	"allusers-disable-emails" )
		if [ -z "$2" ]; then echo "Usage : t3tool $1 <except-username>"; exit 1;
		fi			
		t3tool_sqlq "update be_users set email='' where username != '$username';"
		handled=1;
	;;
	
	#
  # Disable (block) a single user.
  #
	"user-disable" | "ublk" )
		if [ -z "$2" ]; then echo "Usage : t3tool $1 <username>"; exit 1;
		fi
		t3tool_sqlq "update be_users set disable=1 where username='$2'"
	;;
	
	#
  # Enable (unblock) a single user.
  #
	"user-enable" |	"uublk" )
		if [ -z "$2" ]; then echo "Usage : t3tool $1 <username>"; exit 1;
		fi
		t3tool_sqlq "update be_users set disable=0 where username='$2'"
	;;
	
	#
  # Set user's password.
  # 
	"user-password" )
		if [ -z "$2" ]; then echo "Usage : t3tool $1 <username>"; exit 1;
		fi
		echo $LOCALVERSION
 		t3tool_sqlq "update be_users set password=1 where username='$2'"
	;;
	
	#
	#
	#
#	"log-tail" )
#    q=`t3tool_sqlq "select details, log_data, tstamp from sys_log order by tstamp desc limit 30" `
#    php_code=$(cat <<-'EOF' 
#		$e=array_reverse(explode("\n", $argv[1]));
#		array_pop($e);
#		foreach ($e as $i) {
#		  list($details, $log_data, $tstamp) = explode("\t", $i);	
#		  $log_data = unserialize($log_data);
#		  if (is_array($log_data)) {
#			  array_unshift($log_data, $details);
#			 	print implode(" ", array(
#		  		  strftime('%d.%m.%Y %H.%M', $tstamp) . ' : ',
#		  			substr(call_user_func_array('sprintf', $log_data), 0, 100),
#		  		)) . "\n";
#			}
#		}
#		EOF
#		)
#	php -r "$php_code" "$q"
#	;;

	
esac

#
#t3tool.phpsh $1 $2 $3
