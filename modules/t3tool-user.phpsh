<?php
  /**
   * t3tool-user.phpsh
   *
   * Handling of backend users and backend user groups.
   *
   * @package t3tool
   * @author Lars KÃ¸ie
   *
   */

  /**
   * @param $args
   */
  function t3tool_user_handlecmd($args) {
    $level = 0;

    $cmd = strtolower(array_shift($args));
    $username = trim(strtolower($args[0]));

    switch ($cmd) {

      //
      // Create admin user
      //
      case 'create' :
        $password = trim($args[1]);
        if (!$username) {
          output_usage("Usage:\n  t3tool user create <username> [<password>]\n  Password will be prompted if not supplied.\n");

          return FALSE;
        }
        $existing = sql_get_row("select uid from be_users where username like '$username'");
        if ($existing) {
          output_fail("User '$username' already exists. Use 't3tool user password' for changing password.\n", $level);

          return FALSE;
        }
        if (!$password) {
          $password = readPassword();
        }
        if (!$password) {
          output_fail("Password can not be empty.", $level);
        }
        output_cmd('Creating user "' . $username . '"');
        sql_query("insert into be_users (username, password, admin) values ('$username', md5('$password'), 1)");
        output_ok('', $level);

        return TRUE;

        break;

      //
      // Set user's password.
      //
      case 'password' :
        $user = getSingleRecordByString('be_users', $username, array(
          'username',
          'email'
        ));
        $username = $user['username'];
        if (!$username) {
          output_usage("Usage:\n  t3tool user password <username> [<password>]\n  Password will be prompted if not supplied.\n");

          return FALSE;
        }
        $password = trim($args[1]);
        if (!$password) {
          $password = readPassword();
        }
        if (!$password) {
          output_fail("Password can not be empty");

          return FALSE;
        }
        output_cmd("Changing password for user $username.");
        $GLOBALS['t3tool_data']['stored_passwords'][$user['uid']][time()] = $user['password'];
        writeData();
        sql_query("update be_users set password=md5('$password') where uid=" . $user['uid']);
        output_ok();

        return TRUE;
        break;

      //
      // Retrieve
      // TODO : finish this or remove it
      case 'passwordrevert' :
        $user = getSingleRecordByString('be_users', $username, array(
          'username',
          'email'
        ));
        if (!is_array($GLOBALS['t3tool_data']['stored_passwords'][$user['uid']])) {
          output_fail("No stored passwords for user\n");

          return FALSE;
        }

        $index = $args[1];
        if (!trim($index)) {
          output_usage("Usage\n");

          return FALSE;
        }

        break;
      //
      // List user groups
      //
      case 'groups' :
        $groups = getRecordsByString('be_groups', $username, array('title'));

        if (!$groups) {
          output_info("No matching groups.\n");

          return TRUE;
        }

        $where = getWhereByString('be_groups', $username, array('title'));
        $groups = sql_get_rows("select uid, title from be_groups where 1 " . $where);

        sendAsFlatTable($groups);

        break;

      //
      // Find a user group and show all fields
      //
      case 'showgroup' :
        $group = getSingleRecordByString('be_groups', $args[0], array('title'));
        sendRecordAsTable($group);
        break;

      //
      // Find members of a user group
      //
      case 'members' :
        $group = getSingleRecordByString('be_groups', $args[0], array('title'));
        $users = sql_get_rows('select uid, disable, username, email
      from be_users
      where find_in_set(' . $group['uid'] . ', usergroup)');

        if (!$users) {
          output_info("No members.\n");

          return TRUE;
        }

        sendAsFlatTable($users);
        break;

      //
      // Add a group to a user
      //
      case 'addgroup' :
        $user = getSingleRecordByString('be_users', $username, array(
          'username',
          'email'
        ));
        $group = getSingleRecordByString('be_groups', $args[1], array('title'));
        $groups = array();
        if (trim($user['usergroup'])) {
          $groups = explode(',', trim($user['usergroup']));
        }
        if (!in_array($group['uid'], $groups)) {
          $groups[] = $group['uid'];
        }
        output_cmd('Adding group to user');
        sql_query('update be_users set usergroup="' . implode(',', $groups) . '" where uid = ' . $user['uid']);
        output_ok();
        break;

      //
      // Remove a group from a user
      //
      case 'rmgroup' :
        $user = getSingleRecordByString('be_users', $username, array(
          'username',
          'email'
        ));
        $group = getSingleRecordByString('be_groups', $args[1], array('title'));
        $groups = array_fill_keys(explode(',', trim($user['usergroup'])), TRUE);
        unset($groups[$group['uid']]);

        output_cmd('Removing group from user', $level);
        sql_query('update be_users set usergroup="' . implode(',', array_keys($groups)) . '" where uid = ' . $user['uid']);
        output_ok('', $level);

        return TRUE;
        break;

      //
      // Make a user admin
      //
      case 'setadmin' :
        $user = getSingleRecordByString('be_users', $username, array(
          'username',
          'email'
        ));

        output_cmd('Setting user "' . $user['username'] . '" as admin', $level);
        sql_query('update be_users set admin=1 where uid = ' . $user['uid']);
        output_ok('', $level);

        return TRUE;
        break;

      //
      // Make a user non-admin
      //
      case 'clradmin' :
        $user = getSingleRecordByString('be_users', $username, array(
          'username',
          'email'
        ));
        output_cmd('Setting user "' . $user['username'] . '" to non-admin"');
        sql_query('update be_users set admin=0     where uid = ' . $user['uid']);
        output_ok('', $level);

        return TRUE;
        break;

      //
      // List users
      //
      case 'list' :
        $users = getRecordsByString('be_users', $username, array(
          'username',
          'email'
        ), 'uid, username, email, disable, concat(substring(password, 1, 8), "...") as password');

        if (!$users) {
          output_info("No matching users.\n");
        } else {
          sendAsFlatTable($users);
        }

        return TRUE;
        break;

      //
      // Search for user(s) and show all fields.
      //
      case 'show' :
        if (!trim($username)) {
          output_usage("Usage : t3tool user show <username, email or uid>. Case insensitive.\n");
        }
        $user = getSingleRecordByString('be_users', $username, array(
          'username',
          'email'
        ));
        if (trim($user['uc'])) {
          $user['uc'] = unserialize($user['uc']);
        }

        sendRecordAsTable($user);
        break;

      //
      // Enable single user.
      //
      case 'enable' :
        if (!trim($username)) {
          output_usage("Usage : t3tool user enable <username or uid>. Case insensitive.\n");
        }
        $user = getSingleRecordByString('be_users', $username, array(
          'username',
          'email'
        ));

        if ($user['disable'] == 0) {
          output_info($user['username'] . " already enabled.\n");
        }

        output_cmd("Enabling user " . $user['username']);
        sql_query("update be_users set disable=0 where uid= " . $user['uid'] . " limit 1");
        output_ok('', $level);

        return TRUE;

        break;

      //
      // Disable single user
      //
      case 'disable' :
        if (!trim($username)) {
          output_usage("Usage : t3tool user disable <username or uid>. Case insensitive.");
        }
        $user = getSingleRecordByString('be_users', $username, array(
          'username',
          'email'
        ));

        if ($user['disable'] == 1) {
          output_info($user['username'] . " already disabled.\n");
        }
        output_cmd("Disabling user " . $user['username']);

        sql_query("update be_users set disable=1 where uid =  " . $user['uid'] . " limit 1");
        output_ok('', $level);

        return TRUE;

        break;

      //
      // Delete single user.
      //
      case 'delete' :
        if (!trim($username)) {
          return ("Usage : t3tool user delete <username or uid>. Case insensitive. NO going back!");
        }
        $user = getSingleRecordByString('be_users', $username, array(
          'username',
          'email'
        ));

        output_cmd('Deleting user "' . $user['username'] . '"');
        sql_query("delete from be_users where uid =  " . $user['uid'] . " limit 1");
        output_ok('', $level);
        break;

      // --- Below here is stuff related to logged in users (sessions) - should maybe be moved to another module.

      //
      // List backend users currently logged in.
      //
      case 'online' :
        $users = sql_get_rows('
        select uid, username, from_unixtime(ses_tstamp) as last_activity, timediff(now(), from_unixtime(ses_tstamp)) as age, ses_id as cookie
        from be_sessions
        left join be_users on be_sessions.ses_userid=be_users.uid
        ');
        sendAsFlatTable($users);

        break;

      //
      // Kick backend user off system.
      //
      case 'kick' :
        if (!trim($username)) {
          return ("Usage : t3tool user kick <username or uid>.");
        }
        $user = getSingleRecordByString('be_users', $username, array(
          'username',
          'email'
        ));

        output_cmd('Kicking user "' . $user['username'] . '" off system');
        sql_query('delete from be_sessions where ses_userid=' . $user['uid']);
        output_ok('', $level);

        return TRUE;
        break;

      default :
        return ("Backend user commands:
  t3tool user list [<username, email or uid>]
    List all users.
  t3tool user show <username, email or uid>
    Show details of single user.
  t3tool user enable <username, email or uid>
    Enable single user.
  t3tool user disable <username, email or uid>
    Disable single user.
  t3tool user delete <username, email or uid>
    Delete single user. NO going back !
  t3tool user setadmin <username, email or uid>
    Make user admin.
  t3tool user clradmin <username, email or uid>
    Make user non-admin.
  t3tool user groups [<title>]
    List all user groups or filtered by title.
  t3tool user showgroup [<title>]
    Show user groups with all fields.
  t3tool user addgroup <username, email or uid> <group uid or title>
    Add group to user.
  t3tool user rmgroup <username, email or uid> <group uid or title>
    Remove group from user.
  t3tool user password <username, email or uid> [<password>]
    Set users password (password will be prompted if not supplied).
  t3tool user create <username, email or uid>
    Create admin user (password will be prompted if not supplied).

  t3tool user online
    List logged in users.
  t3tool user kick <username or uid>
    Kick user off system.
    ");

    }
  }

  function t3tool_user_cmdaliases() {
    return array(
      'ublk' => 'user disable',
      'ucan' => 'user delete',
      'ucrt' => 'user create',
      'uinf' => 'user show',
      'upwd' => 'user password',
      'urol' => 'user addgroup',
      'urrol' => 'user rmgroup',
      'uublk' => 'user enable',
    );

  }

  /**
   * @return string
   */
  function t3tool_user_usage_short() {
    return ("Backend user commands:
  t3tool user list - List all users.
  t3tool user show - Show details of single user.
  t3tool user enable - Enable single user.
  t3tool user disable - Disable single user.
  t3tool user delete - Delete single user.
  t3tool user setadmin - Make user admin.
  t3tool user clradmin - Make user non-admin.
  t3tool user groups - List all user groups or filtered by title.
  t3tool user showgroup - Show user groups with all fields.
  t3tool user addgroup - Add group to user.
  t3tool user rmgroup - Remove group from user.
  t3tool user password - Set users password
  t3tool user create - Create admin user
  t3tool user online - List logged in users.
  t3tool user kick - Kick user off system.
    ");
  }

  /**
   * @return string
   */
  function t3tool_user_usage_long() {
    return ("Backend user commands:
  t3tool user list [<username, email or uid>]
    List all users.
  t3tool user show <username, email or uid>
    Show details of single user.
  t3tool user enable <username, email or uid>
    Enable single user.
  t3tool user disable <username, email or uid>
    Disable single user.
  t3tool user delete <username, email or uid>
    Delete single user. NO going back !
  t3tool user setadmin <username, email or uid>
    Make user admin.
  t3tool user clradmin <username, email or uid>
    Make user non-admin.
  t3tool user groups [<title>]
    List all user groups or filtered by title.
  t3tool user showgroup [<title>]
    Show user groups with all fields.
  t3tool user addgroup <username, email or uid> <group uid or title>
    Add group to user.
  t3tool user rmgroup <username, email or uid> <group uid or title>
    Remove group from user.
  t3tool user password <username, email or uid> [<password>]
    Set users password (password will be prompted if not supplied).
  t3tool user create <username, email or uid>
    Create admin user (password will be prompted if not supplied).

  t3tool user online
    List logged in users.
  t3tool user kick <username or uid>
    Kick user off system.
    ");

  }

  function t3tool_user_completion() {
    return array(
      'user' => array(
        'addgroup' => 't3tool_user_completion_users, t3tool_user_completion_groups',
        'clradmin' => 't3tool_user_completion_users',
        'create' => 1,
        'delete' => 't3tool_user_completion_users',
        'disable' => 't3tool_user_completion_users_enabled',
        'enable' => 't3tool_user_completion_users_disabled',
        'groups' => 't3tool_user_completion_users',
        'list' => 1,
        'members' => 't3tool_user_completion_groups',
        'password' => 't3tool_user_completion_users',
        'rmgroup' => 't3tool_user_completion_users, t3tool_user_completion_groups',
        'setgroup' => 't3tool_user_completion_users, t3tool_user_completion_groups',
        'show' => 't3tool_user_completion_users',
        'showgroup' => 't3tool_user_completion_groups',
      ),
    );
  }

  /**
   * @return array
   */
  function t3tool_user_completion_users () {
    return sql_get_column('select username from be_users where not deleted');
  }

  /**
   * @return array
   */
  function t3tool_user_completion_users_enabled () {
    return sql_get_column('select username from be_users where not deleted and not disable ');
  }

  /**
   * @return array
   */
  function t3tool_user_completion_users_disabled () {
    return sql_get_column('select username from be_users where not deleted and disable');
  }

  /**
   * @return array
   */
  function t3tool_user_completion_groups () {
    return sql_get_column('select title from be_groups where not deleted');
  }