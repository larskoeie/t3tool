<?php
  /**
   * t3tool-task.phpsh
   *
   * Handling of backend users and backend user groups.
   *
   * @package t3tool
   * @author Lars KÃ¸ie
   *
   */

  /**
   * @param $args
   */
  function t3tool_task_handlecmd($args) {
    $cmd = strtolower(array_shift($args));
    $query = trim(strtolower($args[0]));

    $tasks = getRecordsByString('tx_scheduler_task', $query, array('serialized_task_object'), 'uid, disable, nextexecution, lastexecution_time, serialized_task_object, serialized_executions');
    foreach ($tasks as $i=>$task) {
      $tasks[$i]['nextexecution'] = strftime('%d.%m.%Y %H.%M', $tasks[$i]['nextexecution']);
      $tasks[$i]['lastexecution_time'] = strftime('%d.%m.%Y %H.%M', $tasks[$i]['lastexecution_time']);
      if ($task['serialized_task_object']) {
        $obj = @unserialize($task['serialized_task_object']);
        if (is_object($obj)) {
          $arr = get_object_vars($obj);
          $tasks[$i]['classname'] = $arr['__PHP_Incomplete_Class_Name'];
          $tasks[$i]['commandIdentifier'] = $arr['commandIdentifier'];
        }
//        unset($tasks[$i]['serialized_task_object']);
      }
      $executions = array();
      if ($task['serialized_executions']) {
        $exec = @unserialize($task['serialized_executions']);
        foreach ($exec as $e) {
          $executions[] = strftime('%d.%m.%Y %H.%M', $e);

        }
      }
      $tasks[$i]['running'] = implode(',', $executions);
      unset($tasks[$i]['serialized_executions']);
    }

    switch ($cmd) {

      //
      // List users
      //
      case 'list' :

        if (!$tasks) {
          return("No matching tasks.\n");
        }

        return sendAsFlatTable($tasks);
        break;

      //
      // Search for task and show all fields.
      //
      case 'show' :
        if (!trim($query)) {
          return("Usage : t3tool task show <classname or uid>. Case insensitive.\n");
        }
        $task = getSingleRecordByString('tx_scheduler_task', $query, array('classname'));
        if ($task['serialized_task_object']) {
          $obj = @unserialize($task['serialized_task_object']);
          $arr = get_object_vars($obj);
          $task['classname'] = $arr['__PHP_Incomplete_Class_Name'];
          $task['commandIdentifier'] = $arr['commandIdentifier'];

        }


        return sendRecordAsTable($task);
        print_r($arr);
        break;

      //
      // Enable single task.
      //
      case 'enable' :
        if (!trim($query)) {
          return("Usage : t3tool task enable <classname or uid>. Case insensitive.\n");
        }
        $task = getSingleRecordByString('tx_scheduler_task', $query, array('classname'));

        if ($task['disable'] == 0) {
          return($task['classname'] . " already enabled.\n");
        }

        echo("Enabling task " . $task['classname'] . "... ");
        sql_query("update tx_scheduler_task set disable=0 where uid= " . $task['uid'] . " limit 1");
        echo "done.\n";

        break;

      //
      // Disable single user
      //
      case 'disable' :
        if (!trim($query)) {
          return("Usage : t3tool task disable <classname or uid>. Case insensitive.");
        }
        $task = getSingleRecordByString('tx_scheduler_task', $query, array('classname'));

        if ($task['disable'] == 1) {
          return($task['classname'] . " already disabled.\n");
        }
        echo("Disabling task " . $task['classname'] . "... ");

        sql_query("update tx_scheduler_task set disable=1 where uid =  " . $task['uid'] . " limit 1");
        echo "done.\n";

        break;

      case 'stop' :
        if (sizeof($tasks)) {
          foreach ($tasks as $task) {
            if (! $task['running']) {
              continue;
            }
            output_cmd('Stopping task ' . $task['classname']);
            sql_query('update tx_scheduler_task set serialized_executions="" where uid= ' . $task['uid']);
            output_ok();

          }
        }
        break;

      //
      // Delete single task.
      //
      case 'delete' :
        if (!trim($query)) {
          return("Usage : t3tool task delete <classname or uid>. Case insensitive.");
        }
        $task = getSingleRecordByString('tx_scheduler_task', $query, array());

        sql_query("delete from tx_scheduler_task where uid =  " . $task['uid'] . " limit 1");
        echo $task['uid'] . " deleted.\n";
        break;

        return("t3tool task list [<classname or uid>]
    List all tasks.
  t3tool task enable <classname or uid>
    Enable single task.
  t3tool task disable <classname or uid>
    Disable single task.
  t3tool task delete <classname or uid>
    Delete single task. NO going back !
    ");

    }
  }

  function t3tool_task_usage_short () {
    return("Scheduler task commands:
  t3tool task list - List all tasks.
  t3tool task enable - Enable single task.
  t3tool task disable - Disable single task.
  t3tool task delete - Delete single task.
    ");

  }

  function t3tool_task_usage_long () {
    return("Scheduler task commands:
  t3tool task list [<classname or uid>]
    List all tasks.
  t3tool task enable <classname or uid>
    Enable single task.
  t3tool task disable <classname or uid>
    Disable single task.
  t3tool task stop <uid or *>
    Stop
  t3tool task delete <classname or uid>
    Delete single task. NO going back !
    ");

  }

  /**
   * @return array
   */
  function t3tool_task_completion () {
    return array(
      'task' => array(
        'list' => 1,
        'stop' => 1,
      )

    );

  }
