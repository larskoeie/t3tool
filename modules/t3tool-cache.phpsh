<?php

	/**
	 * t3tool - cli tool for administering a TYPO3 installation
	 *
	 * t3tool-cc.phpsh
	 *
	 * Clear cache.
	 *
	 * @package t3tool
	 * @author  Lars KÃ¸ie <lars@koeie.dk>
	 * @license GNU GPL
	 *
	 */

	/**
	 * @param $args
	 */
	function t3tool_cache_handlecmd($args) {
		$cmd = strtolower(array_shift($args));

		switch ($cmd) {
			case 'clear' :
				$cache = $args[0] ?: 'all';

				t3tool_cache_clear_single($cache);
				break;

			case 'stat' :

				foreach (t3tool_cache_get_db_caches() as $cache => $table) {
					if (!$table) {
						continue;
					}
					$temp = sql_get_row("select count(*) as count from $table;");
					if ($temp) {
						$out[] = array(
							'cache' => $table,
							'count' => $temp['count'],
						);
					}
				}

				foreach (t3tool_cache_get_file_caches() as $cache => $dir) {
					if (substr($dir, -1) == '*') {
						$count = t3tool_find_cache_file($dir) ? 1 : 0;
					} else {
						$count = t3tool_count_files_recursive(PATH_site . 'typo3temp/' . $dir);
					}
					$out[] = array(
						'cache' => $cache,
						'count' => $count,
					);
				}


				return sendAsFlatTable($out);

				break;

			default :
				return ("Cache commands:
  t3tool cache


  ");
		}


	}

	function t3tool_cache_truncate_table($table) {
		$res = sql_query('select * from ' . $table);
		$rows = sql_num_rows($res);
		output_cmd('Truncating ' . $table);
		sql_query('truncate ' . $table);
		output_info($rows . ' rows');
		output_ok();

	}

	function t3tool_cache_clear_single($cache) {
		$file_caches = t3tool_cache_get_file_caches();
		$db_caches = t3tool_cache_get_db_caches();

		if (isset($file_caches[$cache])) {
			if (is_array($file_caches[$cache])) {
				foreach ($file_caches[$cache] as $temp) {
					t3tool_cache_clear_single($temp);
				}

			} else {

				output_cmd("Clearing cache in typo3temp/" . $file_caches[$cache]);
				// v 6.x

				if (substr($file_caches[$cache], -1) == '*') {
					$filename = t3tool_find_cache_file($file_caches[$cache]);
					$count = $filename ? 1 : 0;
					if ($count) {
						unlink(PATH_site . 'typo3temp/' . $filename);
					}
				} else {
					$count = rmdir_recursive(PATH_site . 'typo3temp/' . $file_caches[$cache]);
				}

				output_info($count . ' entries');
				output_ok();
			}

		}

	}

	/**
	 * Truncate all
	 */
	function t3tool_cache_clear_db() {
		$tables = sql_get_rows('show tables');
		foreach ($tables as $table) {
			$temp = each($table);
			$table = $temp[1];
			if (preg_match('/^(cache)|(cf)_/', $table)) {
				t3tool_cache_truncate_table($table);
			}
		}

		return TRUE;
	}

	/**
	 *
	 */
	function t3tool_cache_content() {

	}

	/**
	 *
	 */
	function t3tool_cache_code() {
		output_cmd("Clearing cached code");
		// v 4.x
		$files = scandir(PATH_typo3conf);
		foreach ($files as $file) {
			if (preg_match('/^temp_CACHED/', $file)) {
				unlink(PATH_typo3conf . $file);
			}
		}

		// v 6.x
		$count = rmdir_recursive(PATH_site . 'typo3temp/Cache/Code/');

		output_info($count . ' entries');
		output_ok();
	}


	function t3tool_cache_usage_short() {
		return ("Clear cache commands:
  t3tool cc content - Truncates all cache tables.
  t3tool cc code - Deletes any cached code from extensions.
  t3tool cc all - All of the above.
  t3tool cc db - Truncate all cache tables in DB.
  t3tool cc pics - Empties typo3temp/pics.
  ");

	}

	/**
	 * @return array
	 */
	function t3tool_cache_completion() {
		return array(
			'cache' => array(
				'clear' => 't3tool_cache_completion_caches',
				'list' => 't3tool_cache_completion_caches',
				'show' => 1,
				'stat' => 1,
			),

		);

	}

	function t3tool_cache_get_file_caches() {
		return array(
			// multiple caches :
			'file' => array(
				'code',
				'data',
			),
			'code' => array(
				'core',
				'fluid'
			),
			'core' => array(
				'ext_localconf',
				'ext_tables',
				'classloader',
				'tca',
				'sprites',
				'packagemanager',
				'packageobjects',
			),
			'data' => array(
				'classes',
				'l10n',
			),
			'ext' => array(
				'ext_localconf',
				'ext_tables',
			),

			// single caches :
			'ext_localconf' => 'Cache/Code/cache_core/ext_localconf_*',
			'ext_tables' => 'Cache/Code/cache_core/ext_tables_*',
			'classloader' => 'Cache/Code/cache_core/ClassLoader_*',
			'tca' => 'Cache/Code/cache_core/tca_base_*',
			'fluid' => 'Cache/Code/fluid_template',
			'classes' => 'Cache/Data/cache_classes',
			'l10n' => 'Cache/Data/l10n',
			'sprites' => 'Cache/Code/cache_core/sprites_*',
			'packagemanager' => 'Cache/Code/cache_core/PackageManager_*',
			'packageobjects' => 'Cache/Code/cache_core/PackageObjects_*',
			'pics' => 'pics/',
		);

	}

	/**
	 * @return array
	 */
	function t3tool_cache_get_db_caches() {
		$out['db'] = '';
		$out['realurl'] = '';

		$tables = sql_get_rows('show tables');
		foreach ($tables as $table) {
			$temp = each($table);
			$table = $temp[1];
			if (preg_match('/^(cache)|(cf)_/i', $table) ||
				preg_match('/cache/i', $table)
			) {
				$out[$table] = $table;
			}
		}

		return $out;
	}


	/**
	 * @param $dir
	 * @return string Actual filename
	 */
	function t3tool_find_cache_file($filepattern) {

		if (preg_match(';^(.*/)([^/]+)$;', $filepattern, $m)) {
			$dir = $m[1];
			$filepattern = $m[2];
		}

		if (!is_dir(PATH_site . 'typo3temp/' . $dir)) {
			return FALSE;
		}
		foreach (scandir(PATH_site . 'typo3temp/' . $dir) as $file) {
			if ('.' === $file || '..' === $file) {
				continue;
			}
			if (preg_match('/' . str_replace('*', '.*', $filepattern) . '/', $file)) {
				return $dir . $file;
			}
		}
		return FALSE;
	}

	/**
	 * @param $dir
	 * @return bool
	 */
	function t3tool_count_files_recursive($dir) {
		$count = 0;
		if (!is_dir($dir)) {
			return 0;
		}
		foreach (scandir($dir) as $file) {
			if ('.' === $file || '..' === $file) {
				continue;
			}
			if (is_dir("$dir/$file")) {
				$count += t3tool_count_files_recursive("$dir/$file");
			} else {
				$count++;
			}
		}
		return $count;
	}

	/**
	 *
	 */
	function t3tool_cache_completion_caches() {

		$out = array_keys(t3tool_cache_get_file_caches());
		$out = array_merge($out, t3tool_cache_get_db_caches());

		return $out;
	}