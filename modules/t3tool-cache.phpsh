<?php

	/**
	 * t3tool - cli tool for administering a TYPO3 installation
	 *
	 * t3tool-cc.phpsh
	 *
	 * Clear cache.
	 *
	 * @package t3tool
	 * @author  Lars KÃ¸ie <lars@koeie.dk>
	 * @license GNU GPL
	 *
	 */

	/**
	 * @param $args
	 */
	function t3tool_cache_handlecmd($args) {
		$cmd = strtolower(array_shift($args));

		switch ($cmd) {
			case 'clear' :
				$cache = $args[0];
				if (! trim($cache)) {
					output_usage('Usage:
  t3tool cache clear <cache>

');
				}




				t3tool_cache_clear_single($cache);
				break;

			/**
			 *
			 */
			case 'search' :
				$cache = $args[0];
				$q = $args[1];

				if (! trim($q)) {
					output_usage('Usage:
					t3tool cache search <cache> <string>
					');


				}

				return t3tool_cache_search_single($cache, $q);

				break;

			case 'stat' :

				foreach (t3tool_cache_get_db_caches() as $cache => $table) {
					if (!$table) {
						continue;
					}
					$temp = sql_get_row("select count(*) as count from $table;");
					if ($temp) {
						$out[] = array(
							'cache' => $table,
							'count' => $temp['count'],
							'timestamp' => $timestamp ? dateFormat($timestamp) : '',
						);
					}
				}

				foreach (t3tool_cache_get_file_caches() as $cache => $dir) {
					if (substr($dir, -1) == '*') {
						$cacheFile = t3tool_find_cache_file($dir);
						$count = $cacheFile ? 1 : 0;
						$timestamp = filemtime(PATH_site . 'typo3temp/' . $cacheFile);
					} else {
						$count = t3tool_count_files_recursive(PATH_site . 'typo3temp/' . $dir);
					}
					$out[] = array(
						'cache' => $cache,
						'count' => $count,
						'timestamp' => $timestamp ? dateFormat($timestamp) : '',
					);
				}


				return sendAsFlatTable($out);

				break;

			default :
				return ("Cache commands:
  t3tool cache


  ");
		}


	}

	/**
	 * @param $cache
	 * @param $q
	 */
	function t3tool_cache_search_single ($cache, $q) {
		$file_caches = t3tool_cache_get_file_caches();
		$db_caches = t3tool_cache_get_db_caches();

		if (isset($db_caches[$cache])) {

			if (preg_match('/^cf_/', $cache)) {
				if (preg_match('/_tags$/', $cache)) {
					$matches = t3tool_get_records_by_string($cache, "*$q*", array('tag'));
				} else {
					$matches = t3tool_get_records_by_string($cache, "*$q*", array('content'));
					foreach ($matches as $i=>$dummy) {
						$matches[$i]['expires'] = dateFormat($matches[$i]['expires']);

					}
				}
			}


			foreach ($matches as $i => $match) {
				$matches[$i] = t3tool_crop_and_hilite_record($match, $q);
			}


			return sendAsFlatTable($matches);
		}

	}


	/**
	 * @param $table
	 */
	function t3tool_cache_truncate_table($table) {
		$res = sql_query('select * from ' . $table);
		$rows = sql_num_rows($res);
		output_cmd('Truncating ' . $table);
		sql_query('truncate ' . $table);
		output_info($rows . ' rows');
		output_ok();

	}

	function t3tool_cache_clear_single($cache) {
		$file_caches = t3tool_cache_get_file_caches();
		$db_caches = t3tool_cache_get_db_caches();

		if ($cache == 'all') {
			t3tool_cache_clear_single('db');
			t3tool_cache_clear_single('file');
			return;
		}

		if (isset($file_caches[$cache])) {
			if (is_array($file_caches[$cache])) {
				foreach ($file_caches[$cache] as $temp) {
					t3tool_cache_clear_single($temp);
				}

			} else {

				output_cmd("Clearing cache in typo3temp/" . $file_caches[$cache]);
				// v 6.x

				if (substr($file_caches[$cache], -1) == '*') {
					$filename = t3tool_find_cache_file($file_caches[$cache]);
					$count = $filename ? 1 : 0;
					if ($count) {
						unlink(PATH_site . 'typo3temp/' . $filename);
					}
				} else {
					$count = rmdir_recursive(PATH_site . 'typo3temp/' . $file_caches[$cache]);
				}

				output_info($count . ' entries');
				output_ok();
			}

		}


		if (isset($db_caches[$cache])) {
			if ($cache == 'db') {
				foreach (t3tool_cache_get_db_caches() as $table) {
					if (trim($table)) {
						t3tool_cache_truncate_table($table);
					}
				}

				return TRUE;
			}
			if (is_array($cb_caches[$cache])) {
				foreach ($cb_caches[$cache] as $temp) {
					t3tool_cache_clear_single($temp);
				}
			} else {
				t3tool_cache_truncate_table($cache);
			}

		}
	}


	/**
	 *
	 */
	function t3tool_cache_content() {

	}

	/**
	 *
	 */
	function t3tool_cache_code() {
		output_cmd("Clearing cached code");
		// v 4.x
		$files = scandir(PATH_typo3conf);
		foreach ($files as $file) {
			if (preg_match('/^temp_CACHED/', $file)) {
				unlink(PATH_typo3conf . $file);
			}
		}

		// v 6.x
		$count = rmdir_recursive(PATH_site . 'typo3temp/Cache/Code/');

		output_info($count . ' entries');
		output_ok();
	}


	function t3tool_cache_usage_short() {
		return ("Cache commands:
  t3tool cache clear content - Truncate all cache tables.
  t3tool cache clear code - Delete all cached code from extensions.
  t3tool cache clear db - Truncate all cache tables in DB.
  t3tool cache clear all - All of the above.
  t3tool cc pics - Empty typo3temp/pics.
  ");

	}

	function t3tool_cache_usage_long () {
		return ("Cache commands:
  t3tool cache clear content
    Truncates all cache tables.
  t3tool cache clear code
    Deletes all cached code from extensions.
  t3tool cache clear db
    Truncate all cache tables in DB. More specifically, truncate all tables whose name either
      - starts with 'cf_', or
      - contains 'cache'
  t3tool cc all
    All of the above.
  t3tool cc pics
    Empties typo3temp/pics.
  ");

	}

	/**
	 * @return array
	 */
	function t3tool_cache_completion() {
		return array(
			'cache' => array(
				'clear' => 't3tool_cache_completion_caches',
				'list' => 't3tool_cache_completion_caches',
				'show' => 1,
				'search' => 't3tool_cache_completion_caches',
				'stat' => 1,
			),

		);

	}

	function t3tool_cache_get_file_caches() {
		return array(
			// multiple caches :
			'file' => array(
				'code',
				'data',
			),
			'code' => array(
				'core',
				'fluid'
			),
			'core' => array(
				'ext_localconf',
				'ext_tables',
				'classloader',
				'tca',
				'sprites',
				'packagemanager',
				'packageobjects',
			),
			'data' => array(
				'classes',
				'l10n',
			),
			'ext' => array(
				'ext_localconf',
				'ext_tables',
			),

			// single caches :
			'ext_localconf' => 'Cache/Code/cache_core/ext_localconf_*',
			'ext_tables' => 'Cache/Code/cache_core/ext_tables_*',
			'classloader' => 'Cache/Code/cache_core/ClassLoader_*',
			'tca' => 'Cache/Code/cache_core/tca_base_*',
			'fluid' => 'Cache/Code/fluid_template',
			'classes' => 'Cache/Data/cache_classes',
			'l10n' => 'Cache/Data/l10n',
			'sprites' => 'Cache/Code/cache_core/sprites_*',
			'packagemanager' => 'Cache/Code/cache_core/PackageManager_*',
			'packageobjects' => 'Cache/Code/cache_core/PackageObjects_*',
			'pics' => 'pics/',
		);

	}

	/**
	 * @return array
	 */
	function t3tool_cache_get_db_caches() {
		$out['db'] = '';
		$out['realurl'] = '';

		$tables = sql_get_rows('show tables');
		foreach ($tables as $table) {
			$temp = each($table);
			$table = $temp[1];
			if (preg_match('/^(cache)|(cf)_/i', $table) ||
				preg_match('/cache/i', $table)
			) {
				$out[$table] = $table;
			}
		}

		return $out;
	}


	/**
	 * @param $dir
	 * @return string Actual filename
	 */
	function t3tool_find_cache_file($filepattern) {

		if (preg_match(';^(.*/)([^/]+)$;', $filepattern, $m)) {
			$dir = $m[1];
			$filepattern = $m[2];
		}

		if (!is_dir(PATH_site . 'typo3temp/' . $dir)) {
			return FALSE;
		}
		foreach (scandir(PATH_site . 'typo3temp/' . $dir) as $file) {
			if ('.' === $file || '..' === $file) {
				continue;
			}
			if (preg_match('/' . str_replace('*', '.*', $filepattern) . '/', $file)) {
				return $dir . $file;
			}
		}
		return FALSE;
	}

	/**
	 * @param $dir
	 * @return bool
	 */
	function t3tool_count_files_recursive($dir) {
		$count = 0;
		if (!is_dir($dir)) {
			return 0;
		}
		foreach (scandir($dir) as $file) {
			if ('.' === $file || '..' === $file) {
				continue;
			}
			if (is_dir("$dir/$file")) {
				$count += t3tool_count_files_recursive("$dir/$file");
			} else {
				$count++;
			}
		}
		return $count;
	}

	/**
	 *
	 */
	function t3tool_cache_completion_caches() {

		$out = array_keys(t3tool_cache_get_file_caches());
		$out = array_merge($out, t3tool_cache_get_db_caches());

		return $out;
	}

	function t3tool_cache_cmdaliases () {
		return array(
			'cc' => 'cache clear',
		);
	}

	/**
	 * @param $dir
	 * @return bool
	 */
	function rmdir_recursive($dir) {
		if (!is_dir($dir)) {
			return TRUE;
		}
		foreach (scandir($dir) as $file) {
			if ('.' === $file || '..' === $file) {
				continue;
			}
			if (is_dir("$dir/$file")) {
				$count += rmdir_recursive("$dir/$file");
			} else {
				unlink("$dir/$file");
				$count ++;
			}
		}
		rmdir($dir);
		return $count;
	}
