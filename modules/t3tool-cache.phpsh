<?php

	/**
	 * t3tool - cli tool for administering a TYPO3 installation
	 *
	 * t3tool-cc.phpsh
	 *
	 * Clear cache.
	 *
	 * @package t3tool
	 * @author  Lars KÃ¸ie <lars@koeie.dk>
	 * @license GNU GPL
	 *
	 */

	/**
	 * @param $args
	 */
	function t3tool_cache_handlecmd($args) {
		$cmd = strtolower(array_shift($args));

		switch ($cmd) {
			case 'clear' :
				$cache = $args[0];
				if (!trim($cache)) {
					output_usage('Usage:
  t3tool cache clear <cache>

');
				}

				t3tool_cache_clear_single($cache);
				break;

			case 'list' :
				$cache = $args[0];
				if (!$cache) {
					output_usage('Usage:
  t3tool cache list <cache>

');
				}
				if (in_array($cache, t3tool_cache_get_db_caches())) {
					$table = $cache;
					if (preg_match('/^cf_/', $table)) {
						$tagsTable = $table . '_tags';
						$entries = sql_get_rows("
							select *, group_concat(t.tag) as tags
							from $table as c
							left join $tagsTable as t
								on c.identifier=t.identifier
							group by c.identifier
							limit 30
						");
					} else {
						$entries = sql_get_rows("select * from $table limit 30");
					}

					foreach ($entries as $entry) {
						$out[] = array(
							'id' => $entry['id'],
							'identifier' => $entry['identifier'],
							'size' => strlen($entry['content']) . 'b',
							'expires' => dateFormat($entry['expires']),
							'tags' => $entry['tags'],

						);
					}
					return sendAsFlatTable($out);


				}


				break;
			/**
			 *
			 */
			case 'search' :
				$cache = $args[0];
				$q = $args[1];

				if (!trim($q)) {
					output_usage('Usage:
					t3tool cache search <cache> <string>
					');


				}

				return t3tool_cache_search_single($cache, $q);
				break;

			/**
			 * Build stats table of all caches with number of entries in each.
			 */
			case 'stat' :

				foreach (t3tool_cache_get_db_caches() as $cache => $table) {
					if (!$table || is_array($table)) {
						continue;
					}
					$temp = sql_get_row("select count(*) as count from $table;");
					$count = $temp['count'];

					$temp = sql_get_row("select * from $table limit 1;");
					$minMax = '';
					if (isset($temp['expires'])) {
						$temp = sql_get_row("select min(expires) as mi, max(expires) as ma from $table");
						$minMax = dateFormat($temp['mi']) . ' - ' . dateFormat($temp['ma']);
					}

					if (preg_match('/^cf_/', $table)) {
						$tagsTable = $table . '_tags';
						$temp = sql_get_row("select count(*) as count from $tagsTable;");
						$tagsCount = $temp['count'];
					}


					$out[] = array(
						'cache' => $table,
						'entries' => $count,
						'timestamp' => $timestamp ? dateFormat($timestamp) : '',
						'expires' => $minMax,
						'tags' => $tagsCount,
					);
				}

				foreach (t3tool_cache_get_file_caches() as $cache => $dir) {
					if (!is_array($dir)) {
						if (substr($dir, -1) == '*') {
							$cacheFile = t3tool_find_cache_file($dir);
							$count = $cacheFile ? 1 : 0;
							$timestamp = filemtime(PATH_site . 'typo3temp/' . $cacheFile);
						} else {
							$count = t3tool_count_files_recursive(PATH_site . 'typo3temp/' . $dir);
						}
						$out[] = array(
							'cache' => $cache,
							'entries' => $count,
							'timestamp' => $timestamp ? dateFormat($timestamp) : '',
							'expires' => '',
							'tags' => '',
						);
					}
				}


				return sendAsFlatTable($out);

				break;

			default :
				return ("Cache commands:
  t3tool cache


  ");
		}


	}

	/**
	 * @param $cache
	 * @param $q
	 */
	function t3tool_cache_search_single($cache, $q) {
		$file_caches = t3tool_cache_get_file_caches();
		$db_caches = t3tool_cache_get_db_caches();

		if (isset($db_caches[$cache])) {

			if (preg_match('/^cf_/', $cache)) {
				if (preg_match('/_tags$/', $cache)) {
					$matches = t3tool_get_records_by_string($cache, "*$q*", array('tag'));
				} else {
					$matches = t3tool_get_records_by_string($cache, "*$q*", array('content'));
					foreach ($matches as $i => $dummy) {
						$matches[$i]['expires'] = dateFormat($matches[$i]['expires']);

					}
				}
			}


			foreach ($matches as $i => $match) {
				$matches[$i] = t3tool_crop_and_hilite_record($match, $q);
			}


			return sendAsFlatTable($matches);
		}

	}


	/**
	 * Truncate a cache table.
	 *
	 * @param $table
	 */
	function t3tool_cache_truncate_table($table) {
		$res = sql_query('select * from ' . $table);
		$rows = sql_num_rows($res);
		output_cmd('Truncating ' . $table);
		sql_query('truncate ' . $table);
		output_info($rows . ' rows');
		output_ok();

	}

	/**
	 * Clear a single cache. OR if passed cache parameter is not a single cache, but an alias for multiple caches,
	 * clear them all.
	 *
	 * @param $cache
	 * @return bool|void
	 */
	function t3tool_cache_clear_single($cache) {
		if ($cache == 'realurl') {
			$filename = PATH_site . 'typo3conf/realurl_autoconf.php';
			if (is_file($filename)) {
				output_cmd('Clearing realurl_autoconf.php');
				unlink($filename);
				output_ok();
			} else {
				output_info('Not existing');
			}

			return TRUE;
		}

		$file_caches = t3tool_cache_get_file_caches();
		$db_caches = t3tool_cache_get_db_caches();

		if ($cache == 'all') {
			t3tool_cache_clear_single('db');
			t3tool_cache_clear_single('file');
			return TRUE;
		}

		if (isset($file_caches[$cache])) {
			if (is_array($file_caches[$cache])) {
				foreach ($file_caches[$cache] as $temp) {
					t3tool_cache_clear_single($temp);
				}
			} else {
					t3tool_cache_clear_single($file_caches[$cache]);
			}

		}


		list($type, $name) = explode(':', $cache);
		if (trim($name)) {
			switch ($type) {

				case 'cache' :
					t3tool_cache_clear_single($name);
					break;

				case 'path' :

					output_cmd("Clearing cache in typo3temp/" . $name);
					// v 6.x

					if (substr($name, -1) == '*') {
						$filename = t3tool_find_cache_file($name);
						$count = $filename ? 1 : 0;
						if ($count) {
							unlink(PATH_site . 'typo3temp/' . $filename);
						}
					} else {
						$count = rmdir_recursive(PATH_site . 'typo3temp/' . $name);
					}

					output_info($count . ($count == 1 ? ' entry' : ' entries'));
					output_ok();
					break;
			}
		}



		if (isset($db_caches[$cache])) {
			if ($cache == 'db') {
				foreach (t3tool_cache_get_db_caches() as $table) {
					if (trim($table)) {
						t3tool_cache_truncate_table($table);
						if (preg_match('/^cf_/', $table)) {
							t3tool_cache_truncate_table($table . '_tags');
						}
					}
				}

				return TRUE;
			}
			if (is_array($db_caches[$cache])) {
				foreach ($db_caches[$cache] as $temp) {
					t3tool_cache_clear_single($temp);
				}
			} else {
				t3tool_cache_truncate_table($cache);
			}

		}
	}


	/**
	 *
	 */
	function t3tool_cache_content() {

	}

	/**
	 * Remove cached PHP code
	 */
	function t3tool_cache_code() {
		output_cmd("Clearing cached code");
		// v 4.x
		$files = scandir(PATH_typo3conf);
		foreach ($files as $file) {
			if (preg_match('/^temp_CACHED/', $file)) {
				unlink(PATH_typo3conf . $file);
			}
		}

		// v 6.x
		$count = rmdir_recursive(PATH_site . 'typo3temp/Cache/Code/');

		output_info($count . ' entries');
		output_ok();
	}


	function t3tool_cache_usage_short() {
		return ("Cache commands:
  t3tool cache clear content - Truncate all cache tables.
  t3tool cache clear code - Delete all cached code from extensions.
  t3tool cache clear db - Truncate all cache tables in DB.
  t3tool cache clear all - All of the above.
  t3tool cc pics - Empty typo3temp/pics.
  ");

	}

	function t3tool_cache_usage_long() {
		return ("Cache commands:
  t3tool cache clear content
    Truncates all cache tables.
  t3tool cache clear code
    Deletes all cached code.
  t3tool cache clear db
    Truncate all cache tables in DB. More specifically, truncate all tables whose name either
      - starts with 'cf_', or
      - contains 'cache'
  t3tool cc all
    All of the above.
  t3tool cc pics
    Empties typo3temp/pics.
  ");

	}

	/**
	 * Hook _completion
	 *
	 * @return array
	 */
	function t3tool_cache_completion() {
		return array(
			'cache' => array(
				'clear' => 't3tool_cache_completion_caches',
				'list' => 't3tool_cache_completion_caches',
				'show' => 1,
				'search' => 't3tool_cache_completion_caches',
				'stat' => 1,
			),
			'cc' => 't3tool_cache_completion_caches',

		);

	}

	/**
	 * Return array of file caches
	 *
	 * @return array
	 *
	 */
	function t3tool_cache_get_file_caches() {
		return array(
			// multiple caches :
			'file' => array(
				'cache:code',
				'cache:data',
				'path:Cache'
			),
			'code' => array(
				'cache:core',
				'cache:fluid',
				'path:Cache/Code'
			),
			'core' => array(
				'cache:ext_localconf',
				'cache:ext_tables',
				'cache:classloader',
				'cache:tca',
				'cache:sprites',
				'cache:packagemanager',
				'cache:packageobjects',
			),
			'data' => array(
				'cache:classes',
				'cache:l10n',
			),
			'ext' => array(
				'cache:ext_localconf',
				'cache:ext_tables',
			),


			// single caches :
			'ext_localconf' => 'path:Cache/Code/cache_core/ext_localconf_*',
			'ext_tables' => 'path:Cache/Code/cache_core/ext_tables_*',
			'classloader' => 'path:Cache/Code/cache_core/ClassLoader_*',
			'tca' => 'path:Cache/Code/cache_core/tca_base_*',
			'fluid' => 'path:Cache/Code/fluid_template',
			'classes' => 'path:Cache/Data/cache_classes',
			'l10n' => 'path:Cache/Data/l10n',
			'sprites' => 'path:Cache/Code/cache_core/sprites_*',
			'packagemanager' => 'path:Cache/Code/cache_core/PackageManager_*',
			'packageobjects' => 'path:Cache/Code/cache_core/PackageObjects_*',
			'pics' => 'path:pics/',

		);

	}

	/**
	 * @return array
	 */
	function t3tool_cache_get_db_caches() {
		$out['db'] = '';
		$out['realurl'] = array(
			'tx_realurl_chashcache',
			'tx_realurl_errorlog',
			'tx_realurl_pathcache',
			'tx_realurl_redirects',
			'tx_realurl_uniqalias',
			'tx_realurl_urldecodecache',
			'tx_realurl_urlencodecache',
		);


		$tables = sql_get_rows('show tables');
		foreach ($tables as $table) {
			$temp = each($table);
			$table = $temp[1];
			if ((preg_match('/^(cache)|(cf)_/i', $table) || preg_match('/cache/i', $table)) && !preg_match('/_tags$/', $table)) {
				$out[$table] = $table;
			}
		}

		return $out;
	}


	/**
	 * @param $dir
	 * @return string Actual filename
	 */
	function t3tool_find_cache_file($filepattern) {

		if (preg_match(';^(.*/)([^/]+)$;', $filepattern, $m)) {
			$dir = $m[1];
			$filepattern = $m[2];
		}

		if (!is_dir(PATH_site . 'typo3temp/' . $dir)) {
			return FALSE;
		}
		foreach (scandir(PATH_site . 'typo3temp/' . $dir) as $file) {
			if ('.' === $file || '..' === $file) {
				continue;
			}
			if (preg_match('/' . str_replace('*', '.*', $filepattern) . '/', $file)) {
				return $dir . $file;
			}
		}
		return FALSE;
	}

	/**
	 * @param $dir
	 * @return bool
	 */
	function t3tool_count_files_recursive($dir) {
		$count = 0;
		if (!is_dir($dir)) {
			return 0;
		}
		foreach (scandir($dir) as $file) {
			if ('.' === $file || '..' === $file) {
				continue;
			}
			if (is_dir("$dir/$file")) {
				$count += t3tool_count_files_recursive("$dir/$file");
			} else {
				$count++;
			}
		}
		return $count;
	}

	/**
	 *
	 */
	function t3tool_cache_completion_caches() {

		$out = array_keys(t3tool_cache_get_file_caches());
		$out = array_merge($out, t3tool_cache_get_db_caches());

		return $out;
	}

	function t3tool_cache_cmdaliases() {
		return array(
			'cc' => 'cache clear',
		);
	}

	/**
	 * @param $dir
	 * @return bool
	 */
	function rmdir_recursive($dir) {
		if (!is_dir($dir)) {
			return TRUE;
		}
		foreach (scandir($dir) as $file) {
			if ('.' === $file || '..' === $file) {
				continue;
			}
			if (is_dir("$dir/$file")) {
				$count += rmdir_recursive("$dir/$file");
			} else {
				unlink("$dir/$file");
				$count++;
			}
		}
		rmdir($dir);
		return $count;
	}
