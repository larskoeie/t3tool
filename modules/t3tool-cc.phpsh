<?php
  /**
   * t3tool-cc.phpsh
   *
   * Clear cache.
   *
   * @package t3tool
   * @author Lars Køie
   *
   */

  /**
   * @param $args
   */
  function t3tool_cc_handlecmd($args) {
    $cmd = strtolower(array_shift($args));

    switch ($cmd) {
      // Truncate all cache tables.
      case 'content' :
        t3tool_cc_content();
        break;

      // Delete cached code.
      case 'config' :
        t3tool_cc_config();
        break;

      // both of the above
      case 'all' :

        t3tool_cc_content();
        t3tool_cc_config();
        break;

      case 'db' :
        t3tool_cc_db();
        break;

      // Empty typo3temp/pics.
      case 'pics' :
        break;

      // Realurl cache
      case 'realurl' :
        sql_query('truncate tx_realurl_uniqalias');
        sql_query('truncate tx_realurl_pathcache');
        sql_query('truncate tx_realurl_chashcache');
        break;

      default :
        return ("Clear cache commands:
  t3tool cc content
    Truncates all cache tables.
  t3tool cc config
    Deletes any cached code from extensions.
  t3tool cc all
    All of the above.
  t3tool cc db
    Truncate all cache tables in DB.
  t3tool cc pics
    Empties typo3temp/pics.

  ");
    }

  }

  /**
   * Truncate all
   */
  function t3tool_cc_db() {
    $tables = sql_get_rows('show tables');
    output_cmd("Truncating tables prefixed 'cache_' or 'cf_'");
    foreach ($tables as $table) {
      $temp = each($table);
      $table = $temp[1];
      if (preg_match('/^(cache)|(cf)_/', $table)) {
        output_cmd("Truncating $table");
        sql_query("truncate $table;");
      }
    }
    output_ok();

    return TRUE;
  }

  /**
   *
   */
  function t3tool_cc_content() {

  }

  /**
   *
   */
  function t3tool_cc_config() {
    output_cmd("Clearing config cache");
    $files = scandir(PATH_typo3conf);
    foreach ($files as $file) {
      if (preg_match('/^temp_CACHED/', $file)) {
        unlink(PATH_typo3conf . $file);
      }
    }

    rmdir_recursive(PATH_site . 'typo3temp/Cache/Code/');
    output_ok();
  }


  function rmdir_recursive($dir) {
    if (!is_dir($dir)) {
      return TRUE;
    }
    foreach (scandir($dir) as $file) {
      if ('.' === $file || '..' === $file) {
        continue;
      }
      if (is_dir("$dir/$file")) {
        rmdir_recursive("$dir/$file");
      } else {
        unlink("$dir/$file");
      }
    }
    rmdir($dir);
  }

